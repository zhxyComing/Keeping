package com.dixon.bookkeeping.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dixon.bookkeeping.bean.DetailItemBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DETAIL_ITEM_BEAN".
*/
public class DetailItemBeanDao extends AbstractDao<DetailItemBean, Long> {

    public static final String TABLENAME = "DETAIL_ITEM_BEAN";

    /**
     * Properties of entity DetailItemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property TimeDesc = new Property(1, String.class, "timeDesc", false, "TIME_DESC");
        public final static Property InOrOut = new Property(2, boolean.class, "inOrOut", false, "IN_OR_OUT");
        public final static Property Amount = new Property(3, long.class, "amount", false, "AMOUNT");
        public final static Property ProductDesc = new Property(4, String.class, "productDesc", false, "PRODUCT_DESC");
    }


    public DetailItemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DetailItemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DETAIL_ITEM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TIME_DESC\" TEXT," + // 1: timeDesc
                "\"IN_OR_OUT\" INTEGER NOT NULL ," + // 2: inOrOut
                "\"AMOUNT\" INTEGER NOT NULL ," + // 3: amount
                "\"PRODUCT_DESC\" TEXT);"); // 4: productDesc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DETAIL_ITEM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DetailItemBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String timeDesc = entity.getTimeDesc();
        if (timeDesc != null) {
            stmt.bindString(2, timeDesc);
        }
        stmt.bindLong(3, entity.getInOrOut() ? 1L: 0L);
        stmt.bindLong(4, entity.getAmount());
 
        String productDesc = entity.getProductDesc();
        if (productDesc != null) {
            stmt.bindString(5, productDesc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DetailItemBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String timeDesc = entity.getTimeDesc();
        if (timeDesc != null) {
            stmt.bindString(2, timeDesc);
        }
        stmt.bindLong(3, entity.getInOrOut() ? 1L: 0L);
        stmt.bindLong(4, entity.getAmount());
 
        String productDesc = entity.getProductDesc();
        if (productDesc != null) {
            stmt.bindString(5, productDesc);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DetailItemBean readEntity(Cursor cursor, int offset) {
        DetailItemBean entity = new DetailItemBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // timeDesc
            cursor.getShort(offset + 2) != 0, // inOrOut
            cursor.getLong(offset + 3), // amount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // productDesc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DetailItemBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTimeDesc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInOrOut(cursor.getShort(offset + 2) != 0);
        entity.setAmount(cursor.getLong(offset + 3));
        entity.setProductDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DetailItemBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DetailItemBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DetailItemBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
